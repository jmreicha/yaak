---
# tasks file for common
- name: Create Kubernetes user
  user:
    name: "{{ k8s_user }}"
    shell: /bin/bash

- name: Allow Kubernetes user to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^{{ k8s_user }}"
    line: "{{ k8s_user }} ALL=(ALL) NOPASSWD: ALL"
    validate: 'visudo -cf %s'

- name: Set up authorized keys for Kubernetes user
  authorized_key:
    user: "{{ k8s_user }}"
    state: present
    key: '{{ item }}'
  with_file:
    - files/authorized_keys

- name: Check for authorized_keys file for the Kubernetes user
  stat:
    path: "/home/{{ k8s_user }}/.ssh/authorized_keys"
  register: authorized_keys_exists
  ignore_errors: True

- name: Disable root SSH access
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
    state: present
  notify: restart_ssh

- name: Disable password authentication
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
    state: present
  when: authorized_keys_exists.stat.exists == True
  notify: restart_ssh

- name: Enabling cgroup options at boot
  copy:
    src: cmdline.txt
    dest: /boot/cmdline.txt
    owner: root
    group: root
    mode: 0755
  register: cmdline
  tags:
    - boot
  when: ansible_lsb.id == "Raspbian"

# https://gist.github.com/alexellis/fdbc90de7691a1b9edb545c17da2d975
- name: Disable Swap on Raspbian
  shell: dphys-swapfile swapoff && dphys-swapfile uninstall && update-rc.d dphys-swapfile remove
  when: ansible_lsb.id == "Raspbian"

- name: Disable Swap on other platforms
  shell: swapoff -a
  when: ansible_lsb.id != "Raspbian"

# Update RPi kernel if needed
#- name: Update Raspbian kernel
#  shell: rpi-update
#  register: update_kernel
#  tags:
#    - boot
#  when: ansible_lsb.id == "Raspbian"

# Docker install script should only be run once
- name: Determine if docker is installed
  stat:
    path: /usr/bin/docker
  register: docker_there
  ignore_errors: True

- name: Determine if aptitude is installed
  stat:
    path: /usr/bin/aptitude
  register: aptitude_exists
  ignore_errors: True

- name: Install aptitude (for Ansible)
  command: apt-get install -y aptitude
  when: aptitude_exists.stat.exists == False

# TODO Figure out if this is stable
- name: Update packages
  apt:
    update_cache=yes
    autoclean=yes
    autoremove=yes
    cache_valid_time=86400
  when: docker_there.stat.exists == False

# This will upgrade the rock64 headers if there is a new version
- name: Upgrade packages
  apt:
    upgrade=full
  when: docker_there.stat.exists == False

# Only upgrade if this is a fresh install
#- name: apt-get update
#  command: apt-get update
#  when: docker_there.stat.exists == False

# Use the command because the apt module tries to upgrade the kernel
#- name: apt-get upgrade
#  command: apt-get upgrade -y -q
#  when: docker_there.stat.exists == False

- name: Download Docker install script
  get_url: url=https://get.docker.com dest=/tmp/get-docker.sh mode=0755
  when: docker_there.stat.exists == False

- name: Install Docker
  shell: /tmp/get-docker.sh
  when: docker_there.stat.exists == False

# Downgrade Docker if we need to
- name: Downgrade Raspbian Docker
  apt:
    name: "docker-ce={{ docker_version_raspbian }}"
    force: yes
  when: ansible_lsb.id == "Raspbian"

- name: Downgrade Docker on other platforms
  apt:
    name: "docker-ce={{ docker_version_arm64 }}"
    force: yes
  when: ansible_lsb.id != "Raspbian"

- name: Add k8s user to docker group
  user:
    name: "{{ k8s_user }}"
    groups: docker
    append: yes

- name: Pass bridged IPv4 traffic to iptables' chains
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    state: present

# TODO Fix iscsi and add OVS modules for Rock64 devices
- name: Install packages for added Kubernetes functionality
  apt:
    name: "{{ item }}"
    state: installed
  with_items:
    #- open-iscsi
    - openvswitch-switch
    - openvswitch-common
    - nfs-kernel-server
    - nfs-common

- name: Reboot - only needed if /boot/cmdline.txt changes
  shell: sleep 2 && shutdown -r now "Ansible Reboot for /boot/cmdline.txt Change"
  async: 1
  poll: 0
  ignore_errors: True
  when: cmdline|changed
  tags:
    - boot
    - shutdown

- name: Wait for Reboot
  local_action: wait_for
  args:
    host: "{{ inventory_hostname }}"
    port: 22
    delay: 15
    timeout: 90
  become: False
  when: cmdline|changed
  tags:
    - boot
    - shutdown
